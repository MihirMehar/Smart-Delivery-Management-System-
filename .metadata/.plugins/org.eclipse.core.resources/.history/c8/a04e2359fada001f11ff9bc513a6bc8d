package com.deliveryservices.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.deliveryservices.entity.Delivery;
import com.deliveryservices.exception.DeliveryNotFoundException;
import com.deliveryservices.services.DeliveryService;
import com.orderservices.entity.Order;
import com.orderservices.exception.OrderNotFoundException;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/delivery")
public class DeliveryController {
	
	
	@Autowired
	private DeliveryService deliveryService;
	
	
	//post mapping
	@PostMapping
	public ResponseEntity<Delivery> createDelivery( @RequestBody Delivery delivery){
		return ResponseEntity.status(HttpStatus.CREATED).body(deliveryService.createdelivery(delivery));
	}
	
	// get Mapping
	@GetMapping
	public ResponseEntity<List<Delivery>> getData(){
		return ResponseEntity.ok(deliveryService.getAllData());
	}
	
	@GetMapping("/{deliveryId}")
	public ResponseEntity<Delivery> getDatabyId (@PathVariable  String deliveryId) throws DeliveryNotFoundException{
		return ResponseEntity.ok(deliveryService.getdeliveryByOrderId(deliveryId));
	}

	
	// update 
	
	  @PutMapping("/{deliveryId}")
	    public ResponseEntity<String> updateDelivery(@PathVariable String deliveryId, @RequestBody Delivery delivery) {
	        Delivery updatedDelivery = deliveryService.updateData(deliveryId, delivery);
	        
	        if (updatedDelivery != null) {
	            String message = "Delivery with ID " + deliveryId + " has been successfully updated.";
	            return ResponseEntity.status(HttpStatus.OK).body(message);
	        } else {
	            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Delivery with ID " + deliveryId + " not found.");
	        }
	    }
	


	@DeleteMapping("/{deliveryId}")
	public ResponseEntity<String> deleteOrder(@PathVariable String deliveryId) throws DeliveryNotFoundException {
		String message = "Order id is delete successfully on the server!";
		deliveryService.deletedata(deliveryId);
		return ResponseEntity.status(HttpStatus.OK).body(message);
	}
}
