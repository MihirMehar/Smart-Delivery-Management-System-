package com.deliveryservices.services;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.deliveryservices.entity.Delivery;
import com.deliveryservices.exception.DeliveryNotFoundException;
import com.deliveryservices.repository.DeliveryRepository;

@Service
public class DeliveryServiceImpl  implements DeliveryService{
	
	@Autowired
	private DeliveryRepository deliveryRepository;
	

	@Override
	public Delivery createdelivery(Delivery delivery) {
		String randomId = UUID.randomUUID().toString();
		delivery.setDeliveryId(randomId);
		return deliveryRepository.save(delivery);
	}

	@Override
	public List<Delivery> getAllData() {
		// TODO Auto-generated method stub
		return deliveryRepository.findAll();
	}

	@Override
	public Delivery getdeliveryByOrderId(String deliveryId) throws DeliveryNotFoundException {
		// TODO Auto-generated method stub
		return deliveryRepository.findById(deliveryId).orElseThrow(()-> new DeliveryNotFoundException("Delivery not found")); 
	}

	@Override
	public Delivery updateData(String deliveryId, Delivery delivery) {
	    Optional<Delivery> optional = deliveryRepository.findById(deliveryId);
	    if (optional.isPresent()) {
	        Delivery existingDelivery = optional.get();

	        // Update fields only if they are not null in the provided delivery object
	        if (delivery.getOrderId() != null) {
	            existingDelivery.setOrderId(delivery.getOrderId());
	        }
	        if (delivery.getAddress() != null) {
	            existingDelivery.setAddress(delivery.getAddress());
	        }
	        if (delivery.getDeliveryStatus() != null) {
	            existingDelivery.setDeliveryStatus(delivery.getDeliveryStatus());
	        }
	        if (delivery.getTrackingNumber() != null) {
	            existingDelivery.setTrackingNumber(delivery.getTrackingNumber());
	        }
	        if (delivery.getShoppingProvider() != null) {
	            existingDelivery.setShoppingProvider(delivery.getShoppingProvider());
	        }
	        if (delivery.getEstimatedDeliveryDate() != null) {
	            existingDelivery.setEstimatedDeliveryDate(delivery.getEstimatedDeliveryDate());
	        }
	        if (delivery.getActualDeliveryDate() != null) {
	            existingDelivery.setActualDeliveryDate(delivery.getActualDeliveryDate());
	        }
	        existingDelivery.setDelivered(delivery.isDelivered()); // Update boolean field directly

	        // Save the updated delivery back to the repository
	        return deliveryRepository.save(existingDelivery);
	    }
	    else{
	    	throw new DeliveryNotFoundException("Not found with given id"+delivery.getDeliveryId())// or throw an exception if the delivery is not found
	    }
	}
	
	@Override
	public void deletedata(String deliveryId) throws DeliveryNotFoundException {
		// TODO Auto-generated method stub
		Optional<Delivery> optional = Optional.ofNullable(deliveryRepository.findById(deliveryId).orElseThrow(()-> new DeliveryNotFoundException("Given details are not found")));
		deliveryRepository.deleteById(deliveryId);
		
	}

}
